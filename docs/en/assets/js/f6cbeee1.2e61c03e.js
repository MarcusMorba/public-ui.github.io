"use strict";(self.webpackChunkroot=self.webpackChunkroot||[]).push([[3836],{74641:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/07/01/","metadata":{"permalink":"/en/blog/2023/07/01/","source":"@site/blog/2023-07-01.mdx","title":"React Native vs. Flutter","description":"Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.","date":"2023-07-01T00:00:00.000Z","formattedDate":"July 1, 2023","tags":[],"readingTime":3.7,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"React Native vs. Flutter","authors":["chatgpt","deleonio"]},"nextItem":{"title":"Web- und Native-Apps","permalink":"/en/blog/2023/06/30/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.\\n\\n## Was ist React Native?\\n\\nReact Native ist ein Open-Source-Framework, das es Entwicklern erm\xf6glicht, native mobile Anwendungen f\xfcr verschiedene Plattformen wie iOS, Android und andere mit Hilfe von JavaScript und der React-Bibliothek zu erstellen. Es wurde von Facebook entwickelt und erstmals im Jahr 2015 ver\xf6ffentlicht.\\n\\nMit React Native k\xf6nnen Entwickler mobile Anwendungen entwickeln, die nativ aussehen und sich verhalten, indem sie wiederverwendbare UI-Komponenten erstellen. Es basiert auf dem Konzept von React, einer beliebten JavaScript-Bibliothek zur Erstellung von Benutzeroberfl\xe4chen. React Native verwendet jedoch keine HTML- und CSS-Technologien wie bei Webanwendungen, sondern verwendet native UI-Komponenten, die direkt mit den nativen APIs des Betriebssystems interagieren.\\n\\nEin gro\xdfer Vorteil von React Native besteht darin, dass Entwickler den Gro\xdfteil ihres Codes f\xfcr verschiedene Plattformen wiederverwenden k\xf6nnen, wodurch die Entwicklungseffizienz erh\xf6ht wird. Die Anwendung kann in JavaScript geschrieben werden und auf mehreren Plattformen ausgef\xfchrt werden, wobei React Native die jeweiligen UI-Komponenten f\xfcr die Zielplattform bereitstellt.\\n\\nDank der Kombination aus plattform\xfcbergreifender Entwicklung und der Verwendung nativer UI-Komponenten bietet React Native eine gute Balance zwischen Entwicklungsleistung, Code-Wiederverwendung und einer nativen Benutzererfahrung. Es ist eine beliebte Wahl f\xfcr die Entwicklung mobiler Anwendungen, insbesondere f\xfcr Teams, die sowohl f\xfcr iOS als auch f\xfcr Android entwickeln m\xf6chten.\\n\\n## Was ist Flutter?\\n\\nFlutter ist ein Open-Source-Framework, das von Google entwickelt wurde und es Entwicklern erm\xf6glicht, plattform\xfcbergreifende mobile Anwendungen mit einer einzigen Codebasis zu erstellen. Flutter verwendet die Programmiersprache Dart, die ebenfalls von Google entwickelt wurde.\\n\\nMit Flutter k\xf6nnen Entwickler hochperformante und ansprechende Benutzeroberfl\xe4chen f\xfcr mobile Anwendungen auf verschiedenen Plattformen wie Android, iOS, Web und Desktop erstellen. Es erm\xf6glicht die Erstellung von nativ aussehenden UI-Komponenten, indem es eine eigene Rendering-Engine verwendet, die die UI-Komponenten direkt auf der Bildschirmoberfl\xe4che rendert.\\n\\nEin einzigartiges Merkmal von Flutter ist das sogenannte \\"Hot Reload\\", das Entwicklern erm\xf6glicht, \xc4nderungen im Code in Echtzeit zu sehen, w\xe4hrend die Anwendung l\xe4uft. Dadurch wird der Entwicklungsprozess beschleunigt und die Iterationsschleife verk\xfcrzt.\\n\\nFlutter bietet eine umfangreiche Palette von Widgets und Tools, die Entwicklern helfen, interaktive Benutzeroberfl\xe4chen zu erstellen, Benutzerinteraktionen zu verwalten, Daten zu verarbeiten und vieles mehr. Dar\xfcber hinaus erm\xf6glicht Flutter den Zugriff auf plattformspezifische Funktionen und APIs, falls spezifische Anpassungen erforderlich sind.\\n\\nDank seiner plattform\xfcbergreifenden Natur und der M\xf6glichkeit, ansprechende Benutzeroberfl\xe4chen zu erstellen, hat sich Flutter zu einem beliebten Framework f\xfcr die Entwicklung mobiler Anwendungen entwickelt. Es wird von einer gro\xdfen Entwicklergemeinschaft unterst\xfctzt und bietet eine wachsende Anzahl von Paketen und Erweiterungen, die die Entwicklung erleichtern und erweitern.\\n\\n## Vergleich von React Native und Flutter\\n\\nSowohl React Native als auch Flutter sind beliebte Frameworks f\xfcr die Entwicklung plattform\xfcbergreifender mobiler Anwendungen. Hier ist ein Vergleich der beiden Frameworks:\\n\\n1. Sprache: React Native verwendet JavaScript, eine weit verbreitete Programmiersprache, w\xe4hrend Flutter die Sprache Dart verwendet, die speziell f\xfcr Flutter entwickelt wurde. Die Wahl der Sprache h\xe4ngt von den individuellen Pr\xe4ferenzen des Entwicklers ab.\\n\\n2. Performance: Flutter verwendet eine eigene Rendering-Engine und rendert die UI-Komponenten direkt auf der Bildschirmoberfl\xe4che, was zu einer hohen Performance f\xfchrt. React Native verwendet nativen UI-Code, um die Benutzeroberfl\xe4che zu rendern, was ebenfalls gute Performance erm\xf6glicht, jedoch nicht auf dem gleichen Level wie Flutter.\\n\\n3. Benutzeroberfl\xe4che: Beide Frameworks bieten die M\xf6glichkeit, native aussehende Benutzeroberfl\xe4chen zu erstellen. Flutter verwendet eigene Widgets, die sich an die nativen Betriebssystemelemente anpassen, w\xe4hrend React Native native UI-Komponenten verwendet, um die Benutzeroberfl\xe4che zu erstellen.\\n\\n4. Entwicklungseffizienz: Beide Frameworks erm\xf6glichen die Entwicklung plattform\xfcbergreifender Anwendungen mit einer einzigen Codebasis. Flutter bietet dabei den Vorteil des \\"Hot Reload\\", wodurch Entwickler \xc4nderungen im Code in Echtzeit sehen k\xf6nnen. React Native bietet eine breitere Unterst\xfctzung durch eine gr\xf6\xdfere Entwicklergemeinschaft und eine umfangreichere Auswahl an Drittanbieterpaketen.\\n\\n5. \xd6kosystem: React Native hat ein breiteres \xd6kosystem aufgrund seiner l\xe4ngeren Existenz und der Unterst\xfctzung durch Facebook. Es gibt eine gro\xdfe Anzahl an Open-Source-Paketen, Bibliotheken und Ressourcen f\xfcr React Native. Flutter hat ebenfalls eine wachsende Entwicklergemeinschaft und ein zunehmendes \xd6kosystem, ist jedoch noch nicht so umfangreich wie das von React Native.\\n\\nLetztendlich h\xe4ngt die Wahl zwischen React Native und Flutter von den individuellen Anforderungen des Projekts, den technischen F\xe4higkeiten des Entwicklerteams und den pers\xf6nlichen Vorlieben ab. Beide Frameworks bieten die M\xf6glichkeit, qualitativ hochwertige plattform\xfcbergreifende Anwendungen zu entwickeln, und die Entscheidung sollte basierend auf den spezifischen Anforderungen und Zielen des Projekts getroffen werden.\\n\\n## Weitere Artikel zum Thema\\n\\nF\xfcr die Betrachtung des Themas React Native vs. Flutter aus anderen Perspektiven sind auch folgende Artikel lesenswert:\\n\\n- https://hackr.io/blog/react-native-vs-flutter (EN)\\n- https://www.it-intouch.de/news/details/react-native-vs-flutter-unterschiede-gemeinsamkeiten-im-vergleich/\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/30/","metadata":{"permalink":"/en/blog/2023/06/30/","source":"@site/blog/2023-06-30.mdx","title":"Web- und Native-Apps","description":"Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.","date":"2023-06-30T00:00:00.000Z","formattedDate":"June 30, 2023","tags":[],"readingTime":6.62,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Web- und Native-Apps","authors":["chatgpt","deleonio"]},"prevItem":{"title":"React Native vs. Flutter","permalink":"/en/blog/2023/07/01/"},"nextItem":{"title":"Component Library vs. Design System","permalink":"/en/blog/2023/06/28/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.\\n\\n## Motivation\\n\\nWir werden oft gefragt, ob KoliBri auch f\xfcr die Entwicklung von Native Apps verwenden kann? Die Antwort lautet: Nein. Und das hat auch seine organisatorischen und technischen G\xfcnde. Und was sind \xfcberhaupt Native Apps? Und was ist der Unterschied zu Web Apps? Diese Fragen wollen wir in diesem Artikel beantworten.\\n\\n## Begr\xfcndung\\n\\n### Organisatorisch\\n\\nWer sich f\xfcr eine Softwareverteilung \xfcber einen App-Store entscheidet, muss die Richtlinien der Store-Betreiber ber\xfccksichtigen. Bei Apple beispielsweise m\xfcssen alle Apps im App-Store die UI/UX-Prinzipien von iOS einhalten. Das eigene Corporate Design und Usability ist somit in der Regel nicht abbildbar. Sowohl das Corporate Design als auch die Usability werden eigentlich ma\xdfgeblich durch die Barrierefreiheitsanforderungen gepr\xe4gt. Doch das obligt dem Gestaltungsraum der Betriebssystemhersteller.\\n\\n### Technisch\\n\\nEin entscheidender Grund eine Native App zu entwickeln, liegt in der Notwendigkeit Betriebssystem-nahen Funktionalit\xe4t verwenden zu m\xfcssen. Diese Anforderung \xfcberwiegt dann in der Regel der Gestaltung der Benutzeroberfl\xe4che, da diese ja bei Native Apps das UI der Betriebssystem ist. Somit liegt der Fokus bei Nativen Apps nicht darauf eine Komponentenbibliothek f\xfcr das Betriebssystem erstellen und dar\xfcber hinaus noch die Barrierefreiheit besser zu unterst\xfctzen. Die Umsetzung der Barrierefreiheit auf Basis der nativen Elemente ist Aufgabe der Betriebssystemhersteller.\\n\\n## FAQs\\n\\n### Was sind die Unterschiede zwischen Web- und Native-Apps?\\n\\nWeb-Apps und Native-Apps unterscheiden sich in mehreren Aspekten, darunter die Art der Entwicklung, das Benutzererlebnis, die Plattformunterst\xfctzung und die Performance. Hier sind die wichtigsten Unterschiede zwischen den beiden:\\n\\n1. Entwicklung: Web-Apps werden mit Webtechnologien wie HTML, CSS und JavaScript entwickelt. Sie werden \xfcber einen Webbrowser ausgef\xfchrt und erfordern keine Installation \xfcber einen App Store. Native-Apps werden hingegen speziell f\xfcr eine bestimmte Plattform wie iOS oder Android entwickelt und verwenden die jeweiligen Programmiersprachen (z. B. Swift oder Objective-C f\xfcr iOS und Java oder Kotlin f\xfcr Android).\\n\\n2. Benutzererlebnis: Native-Apps bieten in der Regel ein nahtloses und optimiertes Benutzererlebnis, das speziell auf die Plattform abgestimmt ist. Sie k\xf6nnen auf native Funktionen wie Kamera, GPS und Benachrichtigungen zugreifen und haben eine tiefere Integration in das Betriebssystem. Web-Apps haben ein plattform\xfcbergreifendes Design und k\xf6nnen weniger nahtlos in das Betriebssystem integriert sein.\\n\\n3. Plattformunterst\xfctzung: Native-Apps sind plattformspezifisch und m\xfcssen separat f\xfcr jede Plattform entwickelt werden. Eine iOS-App kann beispielsweise nicht direkt auf einem Android-Ger\xe4t ausgef\xfchrt werden. Web-Apps hingegen k\xf6nnen \xfcber einen Webbrowser auf verschiedenen Plattformen laufen und erfordern keine plattformspezifische Entwicklung.\\n\\n4. Verf\xfcgbarkeit: Native-Apps m\xfcssen \xfcber den entsprechenden App Store heruntergeladen und installiert werden. Dies erm\xf6glicht eine zentrale Verwaltung und Aktualisierung der Apps. Web-Apps hingegen k\xf6nnen \xfcber eine URL direkt \xfcber den Webbrowser aufgerufen werden und erfordern keine separate Installation.\\n\\n5. Performance: Native-Apps haben in der Regel eine bessere Performance, da sie speziell f\xfcr die jeweilige Plattform optimiert sind. Sie haben direkten Zugriff auf die Hardware des Ger\xe4ts und k\xf6nnen die nativen Funktionen effizient nutzen. Web-Apps sind von der Leistung des verwendeten Browsers abh\xe4ngig und k\xf6nnen m\xf6glicherweise nicht die gleiche Geschwindigkeit und Reaktionsf\xe4higkeit wie native Apps bieten.\\n\\nDie Wahl zwischen Web-Apps und Native-Apps h\xe4ngt von den spezifischen Anforderungen des Projekts, dem gew\xfcnschten Benutzererlebnis, der Zielplattform und anderen Faktoren ab. Native-Apps eignen sich besonders gut f\xfcr komplexe Anwendungen mit hohen Performanceanforderungen und umfassender Integration in das Betriebssystem, w\xe4hrend Web-Apps eine plattform\xfcbergreifende Verf\xfcgbarkeit und eine einfachere Wartung bieten k\xf6nnen.\\n\\n### Wann sollte ich Web-Apps und wann Native-Apps entwickeln?\\n\\nDie Entscheidung, ob Sie eine Web-App oder eine Native-App entwickeln sollten, h\xe4ngt von verschiedenen Faktoren ab. Hier sind einige \xdcberlegungen, die Ihnen bei der Entscheidung helfen k\xf6nnen:\\n\\nEntwicklungsanforderungen: Wenn Sie eine plattform\xfcbergreifende Anwendung entwickeln m\xf6chten, die auf verschiedenen Betriebssystemen und Ger\xe4ten l\xe4uft, kann eine Web-App die beste Wahl sein. Mit Webtechnologien wie HTML, CSS und JavaScript k\xf6nnen Sie eine einzige Codebasis erstellen, die auf verschiedenen Plattformen funktioniert. Wenn Sie jedoch eine Anwendung mit einer umfassenden Integration in das Betriebssystem und den Zugriff auf native Funktionen ben\xf6tigen, ist die Entwicklung einer Native-App erforderlich.\\n\\nBenutzererlebnis: Native-Apps bieten in der Regel ein nahtloses und optimiertes Benutzererlebnis, das speziell auf die Plattform abgestimmt ist. Wenn Sie ein hochgradig interaktives und reaktionsf\xe4higes Benutzererlebnis w\xfcnschen, das auf native Funktionen zugreifen kann, kann eine Native-App die bessere Wahl sein. Web-Apps bieten hingegen ein plattform\xfcbergreifendes Design, das auf verschiedenen Ger\xe4ten \xe4hnlich aussieht und sich \xe4hnlich verh\xe4lt.\\n\\nPerformanceanforderungen: Wenn Ihre Anwendung komplexe Aufgaben erf\xfcllen oder eine hohe Performance erfordern, kann eine Native-App die bessere Wahl sein. Native-Apps haben direkten Zugriff auf die Hardware des Ger\xe4ts und k\xf6nnen die volle Leistungsf\xe4higkeit der Plattform nutzen. Web-Apps hingegen sind von der Leistung des verwendeten Browsers abh\xe4ngig und k\xf6nnen m\xf6glicherweise nicht die gleiche Geschwindigkeit und Reaktionsf\xe4higkeit wie native Apps bieten.\\n\\nZielgruppe und Verbreitung: \xdcberlegen Sie, wer Ihre Zielgruppe ist und auf welchen Plattformen Ihre Anwendung verf\xfcgbar sein sollte. Wenn Ihre Benutzer haupts\xe4chlich mobile Ger\xe4te verwenden und Sie eine umfangreiche Integration in die Plattform w\xfcnschen, kann die Entwicklung von Native-Apps f\xfcr iOS und Android sinnvoll sein. Wenn Sie hingegen eine breite Verf\xfcgbarkeit auf verschiedenen Plattformen w\xfcnschen und die Anwendung \xfcber eine URL zug\xe4nglich machen m\xf6chten, kann eine Web-App die beste Wahl sein.\\n\\nBudget und Zeitrahmen: Die Entwicklung von Native-Apps erfordert in der Regel mehr Ressourcen und Zeit, da separate Codebasen f\xfcr jede Plattform entwickelt werden m\xfcssen. Wenn Sie ein begrenztes Budget haben oder Ihre Anwendung schnell auf den Markt bringen m\xf6chten, kann die Entwicklung einer Web-App kosteneffizienter und zeitsparender sein.\\n\\nEs ist wichtig, alle diese Faktoren zu ber\xfccksichtigen und die spezifischen Anforderungen Ihres Projekts zu bewerten, um die richtige Entscheidung zwischen Web-Apps und Native-Apps zu treffen. In einigen F\xe4llen kann auch eine Kombination aus beiden Ans\xe4tzen in Form von Hybrid-Apps oder Progressive Web Apps (PWAs) eine geeignete L\xf6sung sein.\\n\\n### Wie h\xe4uftig werden Web-Apps im Vergleich zu Native-Apps entwickelt?\\n\\nWeb-Apps haben in den letzten Jahren an Beliebtheit gewonnen und werden zunehmend h\xe4ufiger entwickelt. Der Anteil von Web-Apps im Vergleich zu Native-Apps h\xe4ngt jedoch von verschiedenen Faktoren ab, einschlie\xdflich der Art der Anwendung, der Zielgruppe, der Plattformanforderungen und der Leistungsanforderungen.\\n\\nHier sind einige Situationen, in denen Web-Apps h\xe4ufiger entwickelt werden:\\n\\n1. Plattform\xfcbergreifende Anwendungen: Wenn eine Anwendung auf verschiedenen Plattformen wie Desktops, Tablets und Mobilger\xe4ten laufen soll, ist die Entwicklung einer Web-App oft eine praktikable L\xf6sung. Mit einer einzigen Codebasis k\xf6nnen Web-Apps \xfcber verschiedene Betriebssysteme und Ger\xe4te hinweg genutzt werden, was Zeit und Ressourcen spart.\\n\\n2. Informations- und Content-basierte Anwendungen: Web-Apps eignen sich gut f\xfcr Anwendungen, bei denen der Schwerpunkt auf der Bereitstellung von Informationen und Inhalten liegt, wie beispielsweise Nachrichtenportale, Blogs, Online-Shops oder soziale Netzwerke. Solche Anwendungen profitieren von der einfachen Skalierbarkeit und der Verf\xfcgbarkeit \xfcber einen Webbrowser.\\n\\n3. Schnelle Markteinf\xfchrung: Wenn es wichtig ist, eine Anwendung schnell auf den Markt zu bringen und eine breite Verf\xfcgbarkeit zu gew\xe4hrleisten, kann die Entwicklung einer Web-App vorteilhaft sein. Web-Apps erfordern keine Genehmigung oder \xdcberpr\xfcfung durch App Stores und k\xf6nnen \xfcber eine URL zug\xe4nglich gemacht werden.\\n\\nNative-Apps sind jedoch nach wie vor weit verbreitet und werden bevorzugt in folgenden Situationen entwickelt:\\n\\n1. Optimiertes Benutzererlebnis: Wenn ein optimiertes Benutzererlebnis mit einer tiefen Integration in das Betriebssystem und den Zugriff auf native Funktionen erforderlich ist, sind Native-Apps die bessere Wahl. Spiele, anspruchsvolle Anwendungen mit komplexen Funktionen oder Anwendungen, die auf Ger\xe4tefunktionen wie Kamera oder GPS angewiesen sind, profitieren von den Vorteilen nativer Entwicklung.\\n\\n2. Performancekritische Anwendungen: Anwendungen, die eine hohe Performance erfordern, wie beispielsweise grafikintensive Spiele oder rechenintensive Anwendungen, werden oft als Native-Apps entwickelt, um die volle Leistungsf\xe4higkeit des Ger\xe4ts auszunutzen.\\n\\n3. Plattformspezifische Funktionen und M\xe4rkte: Wenn die Anwendung spezifische Funktionen oder APIs erfordert, die nur auf einer bestimmten Plattform verf\xfcgbar sind, wie beispielsweise Apple Pay f\xfcr iOS oder Google Maps f\xfcr Android, ist die Entwicklung einer Native-App notwendig.\\n\\nInsgesamt h\xe4ngt die Entscheidung zwischen Web-Apps und Native-Apps von den spezifischen Anforderungen des Projekts, der Zielgruppe und den verf\xfcgbaren Ressourcen ab. Beide Ans\xe4tze haben ihre Vor- und Nachteile und werden je nach Anwendungsfall unterschiedlich eingesetzt.\\n\\n## Weitere Artikel zum Thema\\n\\nF\xfcr die Betrachtung des Themas Web- und Native-Apps aus anderen Perspektiven ist auch folgender Artikel lesenswert:\\n\\n- https://app-entwickler-verzeichnis.de/faq-app-entwicklung/11-definitionen/586-unterschiede-und-vergleich-native-apps-vs-web-apps-2\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/28/","metadata":{"permalink":"/en/blog/2023/06/28/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-06-28.mdx","title":"Component Library vs. Design System","description":"Note: This article was generated in part by [ChatGPT]. The content was checked by a human and adjusted if necessary.","date":"2023-06-28T00:00:00.000Z","formattedDate":"June 28, 2023","tags":[],"readingTime":10.065,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Component Library vs. Design System","authors":["chatgpt","deleonio"]},"prevItem":{"title":"Web- und Native-Apps","permalink":"/en/blog/2023/06/30/"},"nextItem":{"title":"SPA, PWA und Hyprid-Apps","permalink":"/en/blog/2023/06/21/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Note: This article was generated in part by [ChatGPT]. The content was checked by a human and adjusted if necessary.\\n\\n# Component library vs. design system\\n\\n## What is a component library?\\n\\nA component library is a collection of reusable software components that can be used to develop applications. These components are typically specific to a particular technology or framework and provide pre-built functionality, modules, or building blocks that can be used in various applications.\\n\\nA component library typically contains a variety of predefined components, such as user interface elements (e.g. buttons, input fields, drop-down menus), charts, tables, forms and other functions required in applications. These components are usually well-documented and follow a specific design or programming paradigm to allow for consistent development of applications.\\n\\nUsing a component library can speed up the development of applications because developers don\'t have to create new components from scratch every time. Instead, they can take the pre-built components, customize them, and integrate them into their applications. This saves time and effort and allows developers to focus on the specific needs of their application instead of dealing with the implementation of fundamental components.\\n\\nComponent libraries are widely used in web and software development, especially in frameworks like React, Angular or Vue.js to facilitate the development of user-friendly and consistent user interfaces. They provide a way to build modular and scalable applications by allowing code reuse and separation of duties.\\n\\n## Was ist ein Designsystem?\\n\\nA design system is a collection of guidelines, rules, principles, components, and resources designed to ensure consistent and efficient design for a brand, product line, or application. It provides a unified framework and design language to harmonize the look and feel, interactions and user experience across different platforms and channels.\\n\\nA design system typically includes various elements, such as:\\n\\n1. Design Guidelines: A detailed documentation that describes the design principles, guidelines and standards. Fonts, color palettes, layouts, icons, animations and other visual elements are defined here.\\n\\n2. Component Library: A collection of reusable design components that can be used in application development. Examples of these components include buttons, form elements, cards, navigation elements, and other UI elements.\\n\\n3. UI Patterns: Predefined solutions to recurring design problems or interaction patterns that may arise in application development. They provide best practices for user interaction and improve user experience consistency.\\n\\n4. Style Guide: A document or resource that describes in detail the visual elements of the design, such as colors, fonts, spacing, shading, and other design attributes.\\n\\n5. Resources and Assets: This includes graphics, icons, images and other media elements used in the design process.\\n\\nThe purpose of a design system is to improve efficiency and consistency in the design process, strengthen brand identity, encourage collaboration between designers and developers, and ensure the scalability and maintainability of designs over time. By providing clear guidelines and reusable components, a theme system makes it easier to implement and update the theme, and helps create a seamless and engaging user experience.\\n\\n## What is the difference between a component library and a design system\\n\\nA component library and a design system are two related concepts, but they have different emphases. Here are the main differences between the two:\\n\\n1. Focus: A component library mainly focuses on providing reusable software components that can be used in the development of applications. These components are designed to provide specific functionality or UI elements and can be applied independently of a specific theme. A design system, on the other hand, focuses on defining the design guidelines, principles, and elements that shape the look and feel and user experience of a brand or application.\\n\\n2. Scope: A component library is typically part of a design system. It contains a collection of reusable components that conform to the design system\'s design guidelines and principles. However, the design system also includes other elements such as design guidelines, UI patterns, style guides, and resources that go beyond the component library.\\n\\n3. Audience: A component library is primarily aimed at developers and provides them with pre-built components to develop applications faster. A design system, on the other hand, caters to both designers and developers because it provides a common design language and guidelines for the entire design and development team.\\n\\n4. Purpose: The purpose of a component library is to accelerate application development and encourage code reusability. A theme system, on the other hand, serves to ensure a consistent visual identity and user experience across different platforms and channels.\\n\\nOverall, a component library is a convenient part of a design system, while the design system is a broader concept that goes beyond just providing components and provides a common design language, guidelines, and resources for a consistent design and a pleasing user experience.\\n\\n## What are the 5 most important characteristics of a component library?\\n\\nThe five most important characteristics of a component library are:\\n\\n1. Reusability: A component library is characterized by reusable software components. These components can be used in various applications to save time and effort in development. Reusability also ensures consistency in design and functionality.\\n\\n2. Modularity: A component library consists of individual, independent modules that can be used individually or in combination. Each component performs a specific function or provides a specific UI element. The modularity allows developers to select only the components they need and customize or expand them as needed.\\n\\n3. Documentation: A good component library comes with comprehensive documentation that explains how the components can be used. The documentation includes how-to guides, examples, code snippets, API references, and best practices to help developers get started and use the components. Clear and comprehensive documentation is critical to maximize the value and effectiveness of the component library.\\n\\n4. Consistency: A component library aims to ensure consistency in design and user experience. The components should follow consistent design guidelines and principles to allow for a coherent appearance and smooth user interaction. Using components from the library minimizes the risk of inconsistent or fragmented design.\\n\\n5. Updatable and Maintainable: A good component library will be updated regularly to introduce new features, bug fixes, and improvements. This requires solid maintenance and an active community or development team that supports and further develops the component library. The ability to easily update and maintain the component library is critical to ensure it can keep up with changing requirements and technology.\\n\\nThese characteristics help make a component library effective and useful by providing developers with a solid foundation for developing applications while promoting consistency and reusability.\\n\\n## What are the 5 most important characteristics of a design system?\\n\\nThe five most important characteristics of a design system are:\\n\\n1. Design Guidelines: A design system contains detailed design guidelines that establish the design principles, standards, and best practices for a brand or application. These guidelines define the visual style, color palette, typography, use of icons, spacing, and other design elements. The design guidelines serve as a reference and guide for the entire design team to ensure a consistent and unified visual identity.\\n\\n2. Component Library: A design system includes an extensive component library containing reusable design components. These components, like buttons, form elements, cards, navigation elements, etc. are developed in accordance with the design guidelines and can be used by designers and developers to ensure a consistent design and a smooth user experience.\\n\\n3. UI Patterns: A design system provides ready-made solutions for recurring design problems and interaction patterns that can occur in an application. These UI patterns, such as dropdown menus, search boxes, tables, modals, etc., are developed to provide proven design and interaction patterns that improve user experience and promote consistency.\\n\\n4. Style Guide: A style guide is an important element of a design system. It contains detailed information about the design\'s visual elements, such as colors, fonts, spacing, shading, proportions, and other design attributes. The style guide serves as a reference for designers and developers to ensure that the design is implemented consistently and a consistent visual aesthetic is maintained.\\n\\n5. Governance and Documentation: A design system also includes governance practices to ensure that the design system is effectively managed and maintained. This includes defining roles and responsibilities within the design team, as well as documenting the design decisions, processes, and versioning of the design system. Clear documentation is essential to support the design process, encourage collaboration and ensure the design system is continuously improved and kept up to date.\\n\\nThese characteristics enable a design system to ensure consistent and efficient design across different applications, platforms and channels. They encourage collaboration between designers and developers and make it easier to scale and maintain the design over time.\\n\\n## Sollte man eine Komponentenbibliothek mit einem Designsystem vereinen oder getrennt verwalten?\\n\\nThe decision to unify or maintain a component library with a design system depends on several factors, including the size of the project, the needs of the design team, and the organizational structure. There are pros and cons to both approaches:\\n\\n1. Union of component library and design system:\\n\\n   - Advantages:\\n\\n     - Consistency: A tight integration of the component library and the design system facilitates compliance with design guidelines and promotes a consistent user experience.\\n     - Efficiency: Designers and developers have access to the same resources and components, which makes collaboration easier and speeds up development.\\n     - Scalability: The design system can be easily extended with new components, and changes in the design system can be automatically applied to the component library.\\n\\n   - Disadvantages:\\n\\n     - Dependencies: A tight link between the component library and the design system can result in changes in one area having unexpected effects on other areas.\\n     - Complexity: Managing a combined system may require additional effort to update and maintain.\\n\\n2. Separate management of component library and design system:\\n\\n   - Advantages:\\n\\n     - Flexibility: A separate design system allows greater flexibility in customizing and developing applications, since the components can be used independently of the design system.\\n     - Independence: Changes in the design system have no direct impact on the component library, and vice versa.\\n     - Modularity: Separate management can encourage modularity by allowing different component libraries to be combined into a single design system.\\n\\n   - Disadvantages:\\n\\n     - Consistency challenges: Separate management requires careful coordination to ensure components adhere to design guidelines and provide a consistent user experience.\\n     - Repeated effort: It may be necessary to duplicate certain design elements and components in different component libraries.\\n\\nUltimately, the decision should be made based on the specific needs and challenges of the project. Tight integration of the component library and design system can provide benefits in terms of consistency and efficiency, but may require careful management. Separate management offers more flexibility, but requires good coordination to ensure consistency.\\n\\n## Why decouple a design system from a component library?\\n\\nDecoupling a design system from a component library provides more flexibility and scalability. Here are some reasons:\\n\\n1. Independence: A design system should be decoupled from specific technical implementations in order to have the possibility to use it on different platforms and technologies.\\n\\n2. Adaptability: By separating the design system and component library, design updates can be made independently of the technical implementations. This allows for faster customization and evolution of the design.\\n\\n3. Reusability: A decoupled design system can be reused in different projects and products, independent of the underlying component libraries. This ensures consistency across different applications.\\n\\n4. Team Collaboration: When design and development can work independently, collaboration between teams is facilitated. Design can focus on the design of the system, while development implements the component library efficiently.\\n\\n5. Future-proof: Technologies and frameworks can change over time. By decoupling the design system from the component library, the design system remains more stable and less susceptible to technical changes.\\n\\nBy decoupling the design system from the component library, one can take full advantage of both approaches and build a flexible, scalable, and adaptable design system.\\n\\n## More articles on the topic\\n\\nThe following articles are also worth reading for a different perspective on the topic of component libraries vs. design systems:\\n\\n- https://www.ramotion.com/blog/design-system-vs-component-library/#section-component-library-definition (EN)\\n- https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/ (EN)\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/21/","metadata":{"permalink":"/en/blog/2023/06/21/","source":"@site/blog/2023-06-21.mdx","title":"SPA, PWA und Hyprid-Apps","description":"Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.","date":"2023-06-21T00:00:00.000Z","formattedDate":"June 21, 2023","tags":[],"readingTime":4.765,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"SPA, PWA und Hyprid-Apps","authors":["chatgpt","deleonio"]},"prevItem":{"title":"Component Library vs. Design System","permalink":"/en/blog/2023/06/28/"},"nextItem":{"title":"Ank\xfcndigung Release 1.6","permalink":"/en/blog/2023/06/08/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.\\n\\n## Motivation\\n\\nMit KoliBri k\xf6nnen wir eine Web-App entwickeln, die auf allen Plattformen l\xe4uft. Das ist ein gro\xdfer Vorteil, da wir uns nicht um die Entwicklung von Apps f\xfcr verschiedene Plattformen k\xfcmmern m\xfcssen. Wir k\xf6nnen uns auf die Entwicklung einer einzigen App konzentrieren, die auf allen Plattformen unter Verwendung der Webstandards l\xe4uft.\\n\\n## Grundlagen\\n\\n### Was ist eine Single-Page-Webanwendung (SPA)?\\n\\nEine Single-Page-Webanwendung (SPA) ist eine Art von Webanwendung, bei der der gesamte Inhalt einer Webseite in einer einzigen HTML-Seite geladen wird. Im Gegensatz zu herk\xf6mmlichen mehrseitigen Webanwendungen, bei denen f\xfcr jede Aktion oder Seiten\xe4nderung eine separate HTML-Seite geladen wird, bleibt bei SPAs die Hauptseite unver\xe4ndert, w\xe4hrend nur bestimmte Teile der Seite dynamisch aktualisiert werden.\\n\\nBei einer SPA wird die gesamte Logik und Interaktion im Front-End-Bereich abgewickelt, normalerweise mithilfe von JavaScript-Frameworks oder -Bibliotheken wie React, Angular oder Vue.js. Diese Frameworks erm\xf6glichen es Entwicklern, komplexe Benutzeroberfl\xe4chen zu erstellen und die Aktualisierung von Inhalten oder die Navigation zwischen verschiedenen Ansichten ohne vollst\xe4ndiges Neuladen der Seite zu steuern.\\n\\nDer Hauptvorteil einer SPA liegt in der schnelleren Benutzererfahrung, da nur der erforderliche Inhalt geladen und aktualisiert wird, ohne dass die gesamte Seite neu gerendert werden muss. Dies f\xfchrt zu einem nahtlosen und reaktionsf\xe4higen Benutzererlebnis, \xe4hnlich wie bei Desktopanwendungen.\\n\\nEine SPA kann auch eine bessere Trennung von Front-End- und Back-End-Entwicklung erm\xf6glichen, da das Back-End in der Regel eine API bereitstellt, \xfcber die die SPA Daten abrufen und senden kann.\\n\\nEs ist wichtig anzumerken, dass SPAs ihre eigenen Herausforderungen haben, insbesondere in Bezug auf die Suchmaschinenoptimierung (SEO) und den initialen Ladevorgang, da die gesamte Anwendung zuerst heruntergeladen werden muss. Es erfordert auch sorgf\xe4ltige Handhabung der Seitennavigation und des Zustandsmanagements, um sicherzustellen, dass die Anwendung korrekt funktioniert.\\n\\nInsgesamt bieten SPAs eine moderne Herangehensweise an die Webentwicklung, die ein interaktives und reibungsloses Benutzererlebnis erm\xf6glicht, indem sie den traditionellen mehrseitigen Ansatz umgeht und den Fokus auf dynamische Aktualisierungen und schnelle Interaktionen legt.\\n\\n### Was ist eine Progressive Web App (PWA)?\\n\\nEine Progressive Web App (PWA) ist eine Art von Webanwendung, die bestimmte Funktionen und Eigenschaften von nativen mobilen Apps und Webtechnologien kombiniert. PWAs sind darauf ausgelegt, ein besseres Benutzererlebnis auf verschiedenen Plattformen und Ger\xe4ten zu bieten, unabh\xe4ngig davon, ob der Benutzer \xfcber einen Webbrowser zugreift oder die Anwendung auf dem Startbildschirm seines mobilen Ger\xe4ts installiert.\\n\\nHier sind einige Merkmale und Vorteile von Progressive Web Apps:\\n\\n1. Zuverl\xe4ssigkeit: PWAs sind in der Lage, auch bei schlechter Internetverbindung zu funktionieren, indem sie Mechanismen wie Caching und Offline-Speicherung nutzen. Dies erm\xf6glicht den Benutzern den Zugriff auf Inhalte und Funktionen, auch wenn sie keine stabile Internetverbindung haben.\\n\\n2. Responsives Design: PWAs passen sich automatisch an verschiedene Bildschirmgr\xf6\xdfen und Ger\xe4te an. Sie bieten ein reaktionsschnelles und konsistentes Benutzererlebnis auf Desktops, Tablets und Mobilger\xe4ten.\\n\\n3. App-\xe4hnliches Verhalten: PWAs k\xf6nnen wie native Apps auf dem Startbildschirm des Ger\xe4ts installiert werden und von dort aus gestartet werden. Sie k\xf6nnen Benachrichtigungen senden, Offlinefunktionen nutzen und auf Ger\xe4tefunktionen wie Kamera, GPS und mehr zugreifen.\\n\\n4. Aktualisierungen: PWAs werden automatisch aktualisiert, ohne dass der Benutzer die Anwendung manuell aktualisieren oder im App Store nach Aktualisierungen suchen muss. Dadurch erhalten Benutzer immer die neueste Version der Anwendung.\\n\\n5. Suchmaschinenoptimierung (SEO): PWAs sind von Natur aus suchmaschinenfreundlich, da sie \xfcber eine URL zug\xe4nglich sind und von Suchmaschinen indexiert werden k\xf6nnen. Dies erleichtert die Auffindbarkeit und Sichtbarkeit der Anwendung in Suchergebnissen.\\n\\nPWAs werden mit Webtechnologien wie HTML, CSS und JavaScript entwickelt und verwenden moderne APIs und Frameworks wie Service Workers, um die oben genannten Funktionen zu erm\xf6glichen.\\n\\nDer Einsatz von PWAs bietet Unternehmen und Entwicklern die M\xf6glichkeit, kosteng\xfcnstig plattform\xfcbergreifende Anwendungen zu erstellen, die eine breite Reichweite haben und ein reibungsloses Benutzererlebnis bieten. PWAs werden zunehmend popul\xe4r und von Unternehmen unterschiedlicher Branchen eingesetzt, um ihre Webpr\xe4senz zu verbessern und Kunden besser zu erreichen.\\n\\n### Was ist eine Hybrid-App?\\n\\nEine Hybrid-App ist eine Art von mobiler Anwendung, die sowohl webbasierte als auch native Elemente kombiniert. Sie wird mit Webtechnologien wie HTML, CSS und JavaScript entwickelt und verwendet anschlie\xdfend ein sogenanntes Hybrid-Framework oder eine Hybrid-Plattform, um die Anwendung in eine native App zu verpacken. Hybrid-Apps k\xf6nnen auf verschiedenen Plattformen wie iOS, Android und Windows laufen.\\n\\nHier sind einige Merkmale und Vorteile von Hybrid-Apps:\\n\\n1. Entwicklungsansatz: Hybrid-Apps erm\xf6glichen die Entwicklung einer einzigen Codebasis, die auf verschiedenen Plattformen l\xe4uft. Dadurch k\xf6nnen Unternehmen Zeit und Ressourcen sparen, da sie nicht separate Teams f\xfcr die Entwicklung nativer Apps f\xfcr jede Plattform ben\xf6tigen.\\n\\n2. Webbasierte Technologien: Hybrid-Apps nutzen Webtechnologien wie HTML, CSS und JavaScript, was bedeutet, dass Entwickler mit vorhandenem Webentwicklungswissen die Anwendungsentwicklung beschleunigen k\xf6nnen.\\n\\n3. Zugriff auf native Funktionen: Hybrid-Apps k\xf6nnen auf native Funktionen des Ger\xe4ts zugreifen, wie z.B. Kamera, GPS, Kontakte und Benachrichtigungen, indem sie spezielle APIs oder Plugins verwenden. Dadurch k\xf6nnen Entwickler Funktionen erstellen, die normalerweise nur in nativen Apps verf\xfcgbar sind.\\n\\n4. Plattform\xfcbergreifende Unterst\xfctzung: Hybrid-Frameworks bieten Unterst\xfctzung f\xfcr plattform\xfcbergreifende Entwicklung, sodass Entwickler denselben Code auf verschiedenen Plattformen wiederverwenden k\xf6nnen. Dadurch wird die Entwicklungszeit verk\xfcrzt und die Wartung der Anwendung vereinfacht.\\n\\n5. Vereinfachte Updates: \xc4nderungen oder Updates an der Anwendung k\xf6nnen in Echtzeit vorgenommen werden, ohne dass Benutzer die App aktualisieren m\xfcssen. Dies erm\xf6glicht es Unternehmen, schnell auf Benutzerfeedback zu reagieren und neue Funktionen oder Fehlerbehebungen bereitzustellen.\\n\\nEinige beliebte Hybrid-Frameworks und Plattformen sind Cordova/PhoneGap, Ionic und React Native. Diese Frameworks verwenden WebView-Komponenten, um den webbasierten Inhalt innerhalb einer nativen Container-App anzuzeigen.\\n\\nEs ist wichtig anzumerken, dass Hybrid-Apps im Vergleich zu nativen Apps m\xf6glicherweise nicht die gleiche Leistung oder nahtlose Integration in die Plattform bieten k\xf6nnen. Die Wahl zwischen einer Hybrid-App und einer nativen App h\xe4ngt von den spezifischen Anforderungen des Projekts, dem erforderlichen Grad an Plattformintegration und der Benutzererfahrung ab, die Sie erreichen m\xf6chten.\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/08/","metadata":{"permalink":"/en/blog/2023/06/08/","source":"@site/blog/2023-06-08.mdx","title":"Ank\xfcndigung Release 1.6","description":"WIP: Dieser Artikel wird immer wieder entwicklungsbegleitend aktualisiert.","date":"2023-06-08T00:00:00.000Z","formattedDate":"June 8, 2023","tags":[{"label":"release","permalink":"/en/blog/tags/release"},{"label":"neuerungen","permalink":"/en/blog/tags/neuerungen"}],"readingTime":1.01,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Ank\xfcndigung Release 1.6","authors":"deleonio","tags":["release","neuerungen"]},"prevItem":{"title":"SPA, PWA und Hyprid-Apps","permalink":"/en/blog/2023/06/21/"},"nextItem":{"title":"How can I add a custom button type?","permalink":"/en/blog/2023/06/05/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> **WIP:** Dieser Artikel wird immer wieder entwicklungsbegleitend aktualisiert.\\n\\n# Ank\xfcndigung - Release 1.6\\n\\nDie wichtigsten \xc4nderungen sind:\\n\\n- Verbesserungen\\n- Refactorings\\n  - Vereinheitlichung von Properties der Komponenten (siehe <KolLink _href=\\"/docs/concepts/properties\\" _label=\\"Eigenschaften\\" />-Konzept)\\n    - `_alignment` vom Popover in `_align` umbenannt\\n    - Typ `Alignment` wurde intern in `Align` umbenannt\\n    - `_label` wird in Version 2 folgende Properties ersetzen:\\n      - `_aria-label` von Breadcrumb, Button, ButtonLink, Icon, Link, LinkButton, Modal, Nav, SkipNav, SplitButton, Symbol und Tabs\\n      - `_caption` von Quote und Table\\n      - `_heading` von Accordion, Alert, Card und Toast\\n      - `_headline` von Card\\n      - `_quote` von Quote (?)\\n      - `_summary` von Details\\n      - `_symbol` von Symbol\\n      - `_title` von Abbr\\n    - Properties, die zuk\xfcnftig nicht mehr ben\xf6tigt werden\\n      - `_has-footer` von Card\\n      - `_height_` von Select\\n      - `_icon-align` ...\\n      - `_part` ...\\n      - `_show-dropdown` ...\\n- Expert-Slot\\n  - Alle Inputs-, Select- und Textarea-Komponenten haben nun einen Expert-Slot und das `_label` ist Pflicht. Wenn das `_label=\\"\\"` leer bleibt, dann wird das Label \xfcber den Slot, wie gewohnt angezeigt.\\n  - Code-Replacement - am besten einzeln ersetzen:\\n    - `(<Kol(Button|Button|Link|Heading|Input[^>]+|Link|LinkButton|Select|Textarea))>(\\\\n?\\\\t*)([^\\\\n]+)[^<]+<\\\\/Kol(Button|Button|Link|Heading|Input[^>]+|Link|LinkButton|Select|Textarea)>` -> `$1 _label=\\"$5\\" />`\\n- Theming\\n- Dokumentation\\n- Adapter\\n  - Vaadin: Optimierungen am Code-Generator\\n  - JSF: Verbesserung f\xfcr statische/klassische Formulare (experimental)"},{"id":"/2023/06/05/","metadata":{"permalink":"/en/blog/2023/06/05/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-06-05.mdx","title":"How can I add a custom button type?","description":"Basically, each component can be freely styled within its HTML structure.","date":"2023-06-05T00:00:00.000Z","formattedDate":"June 5, 2023","tags":[{"label":"theming","permalink":"/en/blog/tags/theming"},{"label":"styling","permalink":"/en/blog/tags/styling"},{"label":"button","permalink":"/en/blog/tags/button"}],"readingTime":1.94,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"authors":"deleonio","tags":["theming","styling","button"]},"prevItem":{"title":"Ank\xfcndigung Release 1.6","permalink":"/en/blog/2023/06/08/"},"nextItem":{"title":"How can I change icons in the theme?","permalink":"/en/blog/2023/05/12/"}},"content":"import { KolButton, KolLink } from \'@public-ui/react\';\\n\\n\\nBasically, each component can be freely styled within its HTML structure.\\n\\nWith the help of our designer or the SCSS script, existing themes can be adapted or your own themes can be created.\\n\\n- [Designer](/en/docs/concepts/styling/designer)\\n- [SCSS-Script](/en/docs/concepts/styling/scss)\\n\\n## Button and custom class\\n\\nThe button/switch has 5 types derived from the design language of the design systems:\\n\\n- primary: switch for main action (e.g. save)\\n- secondary: switch for secondary action (e.g. cancel)\\n- normal/tertiary: switch for tertiary action (e.g. back)\\n- danger: switch for \\"dangerous\\" actions (e.g. delete)\\n- ghost: switch for \\"inconspicuous\\" actions (e.g. help)\\n\\nIn addition to these basic types, other types can be added using a custom class.\\nTo do this, however, all custom classes must be stored in the CSS of the theme.\\n\\n<kol-details _summary=\\"Why?\\" _open>\\n\\tIn the implementation, a coordinated design system /design language should not be arbitrarily changed or expanded. All defined custom buttons will be already\\n\\tprovided when the theme was created and their use is described in the documentation of your own design system.\\n</kol-details>\\n\\n### Store custom class in the theme\\n\\n1. Open Theme Designer\\n2. Select theme\\n3. Select Button component\\n4. Switch to component styling\\n5. Enter and save CSS for the custom button (look at `primary`)\\n6. Theme in project \xfcbernehmen\\n\\nExample of custom class `loading`:\\n\\n```css\\n.loading :is(a, button) > kol-span-wc kol-icon {\\n\\tanimation: spin 2.5s infinite linear;\\n\\tdisplay: block;\\n}\\n/* https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion#toning_down_the_animation_scaling */\\n@media (prefers-reduced-motion) {\\n\\t.loading :is(a, button) > kol-span-wc kol-icon {\\n\\t\\tanimation-duration: 5s;\\n\\t}\\n}\\n@keyframes spin {\\n\\tfrom {\\n\\t\\ttransform: rotate(0deg);\\n\\t}\\n\\tto {\\n\\t\\ttransform: rotate(360deg);\\n\\t}\\n}\\n```\\n\\n### Use custom class\\n\\nTo switch to custom mode, the property `_variant` must be set to `custom`. Thereafter\\nany predefined custom classes can be passed via the property `_custom-class`.\\n\\n```html\\n<kol-button _custom-class=\\"loading\\" _label=\\"Save\\" variant=\\"custom\\"></kol-button>\\n```\\n\\n## Style the icon in the button from the outside\\n\\nIt is possible to transfer an icon style to the button. To do this, the desired style must be passed to the property `_icon`.\\n\\n```tsx\\n<KolButton\\n\\t_icon={{\\n\\t\\tleft: {\\n\\t\\t\\ticon: \'codicon codicon-home\',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\tcolor: \'red\',\\n\\t\\t\\t\\t\'font-size\': \'300%\',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}}\\n\\t_label=\\"Switch with big red icon\\"\\n></KolButton>\\n```\\n\\n<KolButton\\n\\t_icon={{\\n\\t\\tleft: {\\n\\t\\t\\ticon: \'codicon codicon-home\',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\tcolor: \'red\',\\n\\t\\t\\t\\t\'font-size\': \'300%\',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}}\\n\\t_label=\\"Switch with big red icon\\"\\n></KolButton>"},{"id":"/2023/05/12/","metadata":{"permalink":"/en/blog/2023/05/12/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-05-12.mdx","title":"How can I change icons in the theme?","description":"Today we want to show in a short blog post how you can change the default icons via the theming (Theme Designer).","date":"2023-05-12T00:00:00.000Z","formattedDate":"May 12, 2023","tags":[{"label":"theming","permalink":"/en/blog/tags/theming"},{"label":"icon","permalink":"/en/blog/tags/icon"},{"label":"font","permalink":"/en/blog/tags/font"}],"readingTime":2.28,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"authors":"deleonio","tags":["theming","icon","font"]},"prevItem":{"title":"How can I add a custom button type?","permalink":"/en/blog/2023/06/05/"},"nextItem":{"title":"Announcement Release 1.5","permalink":"/en/blog/2023/05/03/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n\\nToday we want to show in a short blog post how you can change the default icons via the theming (Theme Designer).\\n\\n## 1. Integrate icon font\\n\\nIn order for icons to be displayed, the desired icon font (e.g. Font Awesome Free) must first be integrated into the website (HTML). This is usually done using the following HTML:\\n\\n```html\\n<head>\\n\\t<link rel=\\"stylesheet\\" href=\\"assets/fontawesome-free/css/all.min.css\\" />\\n</head>\\n```\\n\\n## Store icon font in the theme\\n\\nThe KoliBri icon component encapsulates the icon font and therefore needs to know the CSS definitions of the icon identifiers selected in the design system.\\nTo do this, the CSS must be copied from the same CSS file as from 1. into the theme and stored with it.\\n\\n1. Open Theme Designer\\n2. Select theme\\n3. Select icon component\\n4. Switch to component styling\\n5. Paste CSS from icon font and save\\n6. Apply theme to project\\n\\n## Change default icons in theme\\n\\nChanging an icon is easy if the following principle is clear. All icons are represented by the web component `kol-icon`. This component\\nalways exports the `icon` part. A part provides access to specified CSS properties within a web component. See that as an example\\nlike this:\\n\\n```css\\nkol-icon::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-weight: 900;\\n}\\nkol-icon::part(icon):before {\\n\\tcontent: \'\ud83d\ude03\';\\n}\\n```\\n\\nIn order to change an icon via the designer, the following steps have to be carried out:\\n\\n1. Open Theme Designer\\n2. Select theme\\n3. Select component where an icon should be changed\\n4. Switch to component styling\\n5. Determine specific selector on an icon\\n6. Use specific selector to customize font and content\\n7. Save Component CSS\\n8. Apply theme to project\\n\\nHere is a more complex example of pagination:\\n\\n```css\\nkol-button::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-weight: 900;\\n}\\nkol-button.first::part(icon):before,\\nkol-button.previous::part(icon):before,\\nkol-button.next::part(icon):before,\\nkol-button.last::part(icon):before {\\n\\tcontent: \'\ud83d\ude03\';\\n}\\n```\\n\\n## FAQ\\n\\n### Why is the icon hanging a bit lower in the KolIcon?\\n\\nWith the CSS definition `display:contents;` on the kol-icon tag, the icon is properly aligned. The alignment of the icon component within other components always depends on the specific use.\\n\\n### Why can\'t I change the font size?\\n\\n```css\\nkol-icon::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-size: 2rem !important;\\n\\tfont-weight: 900;\\n}\\n```\\n\\nThe reason lies in the `font` CSS definition in the icon font itself and in the need to set the font size\\napply (inherit) when setting icons from outside.\\n\\n```css\\n.codicon[class*=\'codicon-\'] {\\n\\tfont: 16px / 1 codicon;\\n}\\n:host > i,\\n:host > i::before {\\n\\tfont-size: inherit !important;\\n}\\n```\\n\\nIf you want to adjust the size of an icon, you can do this from the outside.\\n\\n```css\\nkol-icon {\\n\\tfont-size: 2rem;\\n}\\n```"},{"id":"/2023/05/03/","metadata":{"permalink":"/en/blog/2023/05/03/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-05-03.mdx","title":"Announcement Release 1.5","description":"Release 1.5 will be released soon and will bring numerous new components, improvements and simplified theming.","date":"2023-05-03T00:00:00.000Z","formattedDate":"May 3, 2023","tags":[{"label":"release","permalink":"/en/blog/tags/release"},{"label":"neuerungen","permalink":"/en/blog/tags/neuerungen"}],"readingTime":4.56,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Announcement Release 1.5","authors":"deleonio","tags":["release","neuerungen"]},"prevItem":{"title":"How can I change icons in the theme?","permalink":"/en/blog/2023/05/12/"},"nextItem":{"title":"Wie style ich eine Komponente?","permalink":"/en/blog/2023/02/23/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n\\nRelease 1.5 will be released soon and will bring numerous new components, improvements and simplified theming.\\n\\nThe most important changes are:\\n\\n- New components\\n  - Image\\n  - Popover\\n  - Split button\\n  - ToggleButton (see InputCheckbox)\\n  - Quote\\n- Improvements\\n\\n  - Performance\\n    - Performance was affected by the oversized CSS definitions in the icon component. The background are the many icon selectors in the icon fonts. However, only a fraction of these CSS definitions are really needed for a design system. For the components we went with the lightweight Visual Studio Code (Codicon) icon font and removed Iconont and Font-Awesome by default (can be upgraded again). Thus, this release brings with it a significant performance improvement when rendering the components.\\n  - Assets (Fonts and Icons)\\n\\n    - Icon font versions have been updated\\n    - Assets have been split across themes where relevant. As a result, the KoliBri artifact (NPM package) can be reduced in size and thus downloaded and installed faster.\\n    - By storing a postinstall script, the assets can be automatically copied to the `public/assets` folder after each installation of the KoliBri packages.\\n      ```json\\n      \\t// package.json\\n      \\t\\"scripts\\": {\\n      \\t\\t\u2026\\n      \\t\\t\\"postinstall\\": \\"npm-run-all postinstall:*\\",\\n      \\t\\t\\"postinstall:components-assets\\": \\"cpy \\\\\\"node_modules/@public-ui/components/assets/**/*\\\\\\" public/assets --dot\\",\\n      \\t\\t\\"postinstall:themes-assets\\": \\"cpy \\\\\\"node_modules/@public-ui/themes/assets/**/*\\\\\\" public/assets --dot\\",\\n      \\t},\\n      \\t\\"devDependencies\\": {\\n      \\t\\t\\"cpy-cli\\": \\"^4.2.0\\",\\n      \\t\\t\\"npm-run-all\\": \\"^4.1.5\\",\\n      \\t\\t\u2026\\n      \\t}\\n      ```\\n    - Then do a `npm i` (`pnpm i`) to automatically copy all assets to the `public/assets` folder.\\n    - So that the assets do not have to be checked in, they can be excluded in the `.gitignore` file.\\n      ```gitignore\\n      # .gitignore\\n      /public/assets/bundes/\\n      /public/assets/codicons/\\n      /public/assets/fontawesome-free/\\n      /public/assets/icofont/\\n      /public/assets/kreon/\\n      /public/assets/material-icons/\\n      /public/assets/material-symbols/\\n      /public/assets/noto-sans/\\n      /public/assets/roboto/\\n      /public/assets/tabler-icons/\\n      /public/assets/kolibri.ico\\n      ```\\n    - More icon fonts have been used in themes:\\n      - Microsoft Codicons\\n      - Google Material Icons\\n      - Google Material Symbols\\n      - Tabler Icons\\n\\n- Refactorings\\n\\n- We refactored a few components to extend functionality and improve maintainability.\\n- Accordions\\n  - The header of the accordion is now implemented using KoliBri heading, button and span.\\n  - Accordions can now be opened and closed with animation.\\n- Alert\\n  - The construction of the alerts has been revised to allow full flexibility for the design.\\n- Heading\\n- The heading component was provided with an expert slot.\\n  - Inputs, Select and Textarea\\n    - The construction of all input fields has been revised to improve designability and maintainability.\\n  - Nav\\n    - Expandable submenus now have a separate expand button. In this way, the actual menu item can be used independently of the opening and closing.\\n    - Menu items can now be links, buttons or plain text.\\n  - Table\\n    Pagination is now always at the top of the DOM to allow faster navigation for blind users. For sighted users, the pagination can be displayed either above or below the table via the theming.\\n  - Tabs\\n    - The tabs now use the KoliBri button component.\\n  - Tooltip\\n- The tooltip is only intended for internal use in KoliBri components. To improve the designability, the tooltip is now provided without a shadow root. If the component is used outside of KoliBri, the styling must be added to the CSS styling of the project (website, app).\\n\\n  - All relevant themes have been revised with regard to refactorings\\n\\n- Adapter\\n  - Added new adapter for Angular 16\\n- KoliBri CLI\\n  - Templates\\n    - The templates have been revised and updated.\\n    - Angular template updated to version 16\\n- Expert slot\\n\\n  - The Expert slot can be used to paste any HTML instead of the text label at your own risk.\\n  - When introducing an expert slot, the property `_label` usually becomes mandatory. Either the label contains a text that is then displayed without a slot. Or it is empty and the Expert slot is activated.\\n\\n    ```html\\n    <kol-heading _label=\\"Inhalt einer H4-\xdcberschrift\\" _level=\\"4\\"></kol-heading>\\n    <kol-heading _label=\\"\\" _level=\\"4\\">\\n    \\t<span slot=\\"expert\\"> Inhalt einer H4-\xdcberschrift \u2026 </span>\\n    </kol-heading>\\n    ```\\n\\n  - Heading: The heading now allows you to insert any content in expert mode. The required property `_label` was introduced for this purpose. Leaving the property empty (`_label=\\"\\"`) activates the expert slot.\\n\\n- Theming\\n  - Basic styling: We have reduced the CSS on the components to the essentials. The styling primarily only contains layout definitions without colors, distances and tokens. This makes creating your own themes much easier.\\n  - All of our themes have been adapted to the new basic styling definitions and have been significantly simplified as a result.\\n  - New themes\\n    - Theme of the European Commission\\n    - European Union theme\\n    - Theme for the new version of the Customs Design System (v2)\\n    - Theme of the federal style guide (federal government)\\n    - Theme of the Federal Central Tax Office (WIP)\\n    - Theme of the Free State of Thuringia (for demo purposes)\\n- Documentation\\n  - Code examples\\n    - There is an example application (<KolLink _href=\\"/sample-react/#/handout\\" _label=\\"Sample-App\\" _target=\\"samples\\" />) with numerous code examples.\\n    - Code samples have been expanded and updated\\n    - Example application can be checked out and started locally (is in the KoliBri repository).\\n    - Code examples are now displayed in the documentation.\\n    - Code Examples includes a handout view for theme presentations.\\n  - Texts\\n    - The texts have been revised and updated.\\n    - The texts have been translated into English.\\n- Live Editor (beta): All components can now be reconfigured live. The changes are displayed directly on the component in the viewer next to it.\\n- Functionalities\\n  - The link now allows specifying a filename for the download link.\\n  - The progress can now also display the progress as readable text and have a label."},{"id":"/2023/02/23/","metadata":{"permalink":"/en/blog/2023/02/23/","source":"@site/blog/2023-02-23.mdx","title":"Wie style ich eine Komponente?","description":"Am Beispiel der Badge-Komponente wollen wir einmal schauen, wie das Stylen funktioniert.","date":"2023-02-23T00:00:00.000Z","formattedDate":"February 23, 2023","tags":[{"label":"theme","permalink":"/en/blog/tags/theme"},{"label":"tutorial","permalink":"/en/blog/tags/tutorial"}],"readingTime":1.74,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Wie style ich eine Komponente?","authors":"deleonio","tags":["theme","tutorial"]},"prevItem":{"title":"Announcement Release 1.5","permalink":"/en/blog/2023/05/03/"},"nextItem":{"title":"Eigene Themes unabh\xe4ngig umsetzen","permalink":"/en/blog/2023/02/02/"}},"content":"import { KolLink, KolTable } from \'@public-ui/react\';\\n\\n\\nAm Beispiel der Badge-Komponente wollen wir einmal schauen, wie das Stylen funktioniert.\\n\\n## Herausforderung\\n\\nDie Badge-Komponente hat einen Smart-Button und der soll optisch kleiner aussehen, wie ein Button, der immer mindestens\\n44px hoch und breit ist.\\n\\n- [ ] Bild einf\xfcgen vorher\\n\\nWir sehen im nachfolgenden HTML-Snippet, dass der umschlie\xdfende Span die Badge-Hintergrundfarbe bestimmt. Da\\nder Button innerhalb des Span ist, wird die Hintergrundfarbe auch auf den Button gesetzt. Der Button muss\\nmindestens 44px hoch und breit sein, also wird auch der \xe4u\xdfere Span mindestens 44px hoch und breit.\\n**Das wollen wir nicht.**\\n\\n```html\\n<span class=\\"smart-button\\" style=\\"background-color: rgb(204, 222, 218); color: rgb(0, 78, 55);\\">\\n\\t<kol-span-wc class=\\"hydrated\\">\\n\\t\\t<span>\\n\\t\\t\\t<span>Badge mit Schalter</span>\\n\\t\\t</span>\\n\\t</kol-span-wc>\\n\\t<kol-button-wc _icon-only=\\"\\" class=\\"hydrated\\">\\n\\t\\t<button aria-labelledby=\\"cf22bf\\" class=\\"normal icon-only\\" type=\\"button\\">\\n\\t\\t\\t<kol-span-wc class=\\"icon-only hydrated\\" _icon-only=\\"\\">\\n\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t<kol-icon class=\\"icon left hydrated\\" style=\\"\\"></kol-icon>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</kol-span-wc>\\n\\t\\t</button>\\n\\t\\t<kol-tooltip aria-hidden=\\"true\\" class=\\"hydrated\\">\\n\\t\\t\\t<div id=\\"floating\\" style=\\"left: 1233.91px; top: 312.5px; display: none; visibility: hidden;\\">\\n\\t\\t\\t\\t<div id=\\"arrow\\" style=\\"left: 19px; bottom: -5px;\\"></div>\\n\\t\\t\\t\\t<kol-badge id=\\"cf22bf\\" class=\\"hydrated\\" style=\\"\\"></kol-badge>\\n\\t\\t\\t</div>\\n\\t\\t</kol-tooltip>\\n\\t</kol-button-wc>\\n</span>\\n```\\n\\n## L\xf6sung\\n\\n### Idee 1\\n\\nWir optimieren die Komponente, indem wir die Hintergrundfarbe vom umschlie\xdfenden Span entfernen und auf die beiden\\ninneren Span-Elemente \xfcbertragen.\\n\\n```html\\n<span class=\\"smart-button\\" style=\\"color: rgb(0, 78, 55);\\">\\n\\t<kol-span-wc class=\\"hydrated\\" style=\\"background-color: rgb(204, 222, 218);\\">\\n\\t\\t<span>\\n\\t\\t\\t<span>Badge mit Schalter</span>\\n\\t\\t</span>\\n\\t</kol-span-wc>\\n\\t<kol-button-wc _icon-only=\\"\\" class=\\"hydrated\\">\\n\\t\\t<button aria-labelledby=\\"cf22bf\\" class=\\"normal icon-only\\" type=\\"button\\">\\n\\t\\t\\t<kol-span-wc class=\\"icon-only hydrated\\" _icon-only=\\"\\" style=\\"background-color: rgb(204, 222, 218);\\">\\n\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t<kol-icon class=\\"icon left hydrated\\" style=\\"\\"></kol-icon>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</kol-span-wc>\\n\\t\\t</button>\\n\\t\\t<kol-tooltip aria-hidden=\\"true\\" class=\\"hydrated\\">\\n\\t\\t\\t<div id=\\"floating\\" style=\\"left: 1233.91px; top: 312.5px; display: none; visibility: hidden;\\">\\n\\t\\t\\t\\t<div id=\\"arrow\\" style=\\"left: 19px; bottom: -5px;\\"></div>\\n\\t\\t\\t\\t<kol-badge id=\\"cf22bf\\" class=\\"hydrated\\" style=\\"\\"></kol-badge>\\n\\t\\t\\t</div>\\n\\t\\t</kol-tooltip>\\n\\t</kol-button-wc>\\n</span>\\n```\\n\\n**Das geht aber nicht**, weil wir an den 2. Span nicht rankommen. Wir m\xfcssen also eine andere L\xf6sung finden.\\n\\n### Idee 2\\n\\nEs bleibt beim der initialen Komponenten-Konstruktion. Wir versuchen es mit CSS und erzwingen eine Zeilenh\xf6he f\xfcr\\nden umschlie\xdfenden Span.\\n\\n- [ ] Bild Heihgt 1.75rem einf\xfcgen\\n\\nWir sehen im Bild, dass der linke Rand des Button oben rausragt. Das k\xf6nnen wir aber leicht l\xf6sen, indem wir\\nden linken Rand des Buttons auf 0 setzen und stattdessen einen rechten Rand am Text-Span setzen."},{"id":"/2023/02/02/","metadata":{"permalink":"/en/blog/2023/02/02/","source":"@site/blog/2023-02-02.mdx","title":"Eigene Themes unabh\xe4ngig umsetzen","description":"Ein gro\xdfer Vorteil von KoliBri liegt in seiner besonders guten Wiederverwendbarkeit und hohen Flexiblit\xe4t. Denn auf","date":"2023-02-02T00:00:00.000Z","formattedDate":"February 2, 2023","tags":[{"label":"theme","permalink":"/en/blog/tags/theme"},{"label":"style","permalink":"/en/blog/tags/style"},{"label":"styleguide","permalink":"/en/blog/tags/styleguide"},{"label":"corporate design","permalink":"/en/blog/tags/corporate-design"},{"label":"design system","permalink":"/en/blog/tags/design-system"}],"readingTime":3.67,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Eigene Themes unabh\xe4ngig umsetzen","authors":"deleonio","tags":["theme","style","styleguide","corporate design","design system"]},"prevItem":{"title":"Wie style ich eine Komponente?","permalink":"/en/blog/2023/02/23/"},"nextItem":{"title":"Button and link components","permalink":"/en/blog/2023/01/09/"}},"content":"import { KolLink, KolTable } from \'@public-ui/react\';\\n\\n\\nEin gro\xdfer Vorteil von KoliBri liegt in seiner besonders guten Wiederverwendbarkeit und hohen Flexiblit\xe4t. Denn auf\\nBasis der semantisch barrierefreien Komponenten, in denen alle technische und gesetzliche Anforderungen umgesetzt\\nsind, k\xf6nnen eigene Themes unabh\xe4ngig erstellt werden.\\n\\n## R\xfcckblick\\n\\nKoliBri wurde als internes Projekt des ITZBund realisiert und hat sich nat\xfcrlich dabei anfangs vor allem auf die Bed\xfcrfnisse interner\\nProjekte fokussiert. Hierbei sind in erster Linie zahlreiche Themes umgesetzt worden, die nur intern Anwendung finden.\\n\\n<KolTable\\n\\t_caption=\\"Liste ausgew\xe4hlter internen Themes\\"\\n\\t_headers={{\\n\\t\\thorizontal: [\\n\\t\\t\\t[\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Name\',\\n\\t\\t\\t\\t\\twidth: \'5em\',\\n\\t\\t\\t\\t\\tkey: \'name\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Verwendung\',\\n\\t\\t\\t\\t\\tkey: \'usage\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t],\\n\\t\\t],\\n\\t}}\\n\\t_data={[\\n\\t\\t{\\n\\t\\t\\tname: \'BMF\',\\n\\t\\t\\tusage: \'Verwendung im BMF f\xfcr die Modernisierung der Haushaltsverfahren\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'DESY\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das Portal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'MAPZoll\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das Mitarbeiterportal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'Zoll\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das neue Mitarbeiterportal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t]}\\n/>\\n\\n<br />\\n\\nDar\xfcber hinaus wurden auch einige Themes zum Zwecke der Verbesserung umgesetzt, die als Proof-of-Concepts (PoC) dienten.\\n\\n<KolTable\\n\\t_caption=\\"Liste ausgew\xe4hlter PoC-Themes\\"\\n\\t_headers={{\\n\\t\\thorizontal: [\\n\\t\\t\\t[\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Name\',\\n\\t\\t\\t\\t\\twidth: \'5em\',\\n\\t\\t\\t\\t\\tkey: \'name\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Verwendung\',\\n\\t\\t\\t\\t\\tkey: \'usage\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t],\\n\\t\\t],\\n\\t}}\\n\\t_data={[\\n\\t\\t{\\n\\t\\t\\tname: \'BY\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Online-Styleguides der Bayerischen Staatsregierung als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'HH\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Styleguides der Hansestadt Hamburg als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'TH\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Styleguides des Freistaates Th\xfcringens als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t]}\\n/>\\n\\n## Migration\\n\\nWir beschreiben jetzt hier in der Migration einfach mal, wie wir das im ITZBund exemplarisch umgesetzt haben, weil dass sicher\\nein interessanter Aspekt f\xfcr andere Beh\xf6rden, Organisationen und Unternehmen ist, wie sie eigene Themes intern bereitstellen\\nk\xf6nnen.\\n\\nIm Grunde haben wir ein neues Repository angelegt und ein Theme-Projekt erstellt (siehe n\xe4chsten Abschnitt), in dem wir alle\\ninternen Themes pflegen. Wir haben erstmal alle Themes in einem Repository, weil wir das f\xfcr die Entwicklung aktuell einfacher\\nfinden. Es ist aber auch m\xf6glich, die Themes in unterschiedlichen Repositories jeweils einzeln zu pflegen.\\n\\nMittels des TypeScript-Compilers wird das Theme-Projekt in ein JavaScript-Projekt kompiliert und als NPM-Paket <code>@itzbund/interne-kolibri-themes</code>\\nin unsere interne NPM-Registry versioniert gepublished.\\n\\nDamit die entwickelnden Projekte jetzt das neue Theme-Paket installieren und verwenden k\xf6nnen, muss zun\xe4chst die NPM-Konfiguration <code>.npmrc</code>\\nim Projekt-Verzeichnis erweitert und die neue Abh\xe4ngigkeit in die <code>package.json</code> hinzugef\xfcgt werden.\\n\\n**`.npmrc`** (kann mit im Projekt-Verzeichnis liegen oder im Home-Verzeichnis des Benutzers)\\n\\n```bash\\n@itzbund:registry=https://<URL-zur-internen-registry>\\n```\\n\\n**`package.json`** (im Projekt-Verzeichnis)\\n\\n```json\\n{\\n\\t\\"dependencies\\": {\\n\\t\\t\\"@itzbund/interne-kolibri-themes\\": \\"1.0.0\\"\\n\\t}\\n}\\n```\\n\\n## Eigenes Theme erstellen\\n\\nIn diesem Abschnitt wollen wir einen kurzen Einblick geben, wie einfach es ist, ein eigenes Theme zu erstellen.\\n\\n### Rationale\\n\\nEiner der wichtigsten Punkte, die man verstehen muss, liegt darin, dass KoliBri sich auf kleinteilige\\nh\xe4ufig wiederverwendete Komponenten konzentriert (mehr hierzu im <KolLink _href=\\"/docs/manifest\\" _label=\\"Manifest\\" />).\\nDas f\xfchrt dazu, dass wir uns vorallem auf standardisierbare Komponenten fokussieren. Deutlicher wird dies,\\nwenn wir uns vorstellen, eine redundante Umsetzung einer Basis-Komponente unter Beachtung der technischen und\\ngesetzlichen Anforderungen zu entwickeln und am Ende feststellen - die verh\xe4lt sich ja genauso, wie eine KoliBri-\\nKomponente und ist nahezu gleich semantisch aufgebaut. Insbesondere die technisch semantischen Vorgaben des W3C\\nf\xfcr die assistive Unterst\xfctzung (Barrierefreiheit) f\xf6rdern das Standardisierungspotenzial.\\n\\nWir k\xf6nnen somit von einer hohen \xdcberdeckung von Komponenten ausgehen, die allgemein jedes Design System oder\\nKomponenten-Bibliothek beinhalten und sich in der KoliBri-Sammlung verwendbar wiederfinden. Durch das Kompositionsprinzip\\nkann einfach die passende Teilmenge aus KoliBri ausgew\xe4hlt und wiederverwendet werden. Alle nicht vereinbarten Komponenten\\nk\xf6nnen unabh\xe4ngig von KoliBri und unternehmensspezifisch umgesetzt werden.\\n\\n> **Hinweis:** Es ist immer m\xf6glich eine Konstellation gegen die Wiederverwendung einer KoliBri-Komponenten aufzustellen,\\n> die auf die Abweichung von der Referenzimplementierung abzielt. Es ist nicht unsere Entscheidung ob die aufgezeigte\\n> Abweichung eine vollst\xe4ndige Eigenentwicklung wirtschaftlich und \xf6konomisch rechtfertigt. Wir bieten eine L\xf6sung an, die\\n> von alle frei und gepr\xfcft genutzt werden kann.\\n\\n### Umsetzung\\n\\nMit Hilfe der KoliBri-CLI (<code>npm init kolibri my-theme</code>) kann ein neues Theme-Projekt generiert werden. Das Theme-Projekt\\nist ein TypeScript-Projekt und beinhalten schon ein Dummy-Theme. Mit Hilfe des KoliBri-Designers kann dann ein Theme\\ninteraktiv auf den Basis-Komponenten erstellt, gespeichert, geladen und weiter gepflegt werden. Der vom Designer generierte Code wird\\neinfach in das Theme-Projekt kopiert und kann dann mit dem TypeScript-Compiler kompiliert werden. Anschlie\xdfend kann es mittels NPM\\neine interne oder in die \xf6ffentliche NPM-Registry gepublished werden."},{"id":"/2023/01/09/","metadata":{"permalink":"/en/blog/2023/01/09/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-01-09.mdx","title":"Button and link components","description":"Today we offer the variants of Button, ButtonLink, Link and LinkButton. In the future we will also offer the ButtonToggle (Toogle button). All semantic links only support href and all buttons only on as a semantic \\"click\\". Visually, there are buttons that look exactly like links and links that look exactly like buttons.","date":"2023-01-09T00:00:00.000Z","formattedDate":"January 9, 2023","tags":[{"label":"button","permalink":"/en/blog/tags/button"},{"label":"link","permalink":"/en/blog/tags/link"}],"readingTime":3.06,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Button and link components","authors":"deleonio","tags":["button","link"]},"prevItem":{"title":"Eigene Themes unabh\xe4ngig umsetzen","permalink":"/en/blog/2023/02/02/"},"nextItem":{"title":"Translations","permalink":"/en/blog/2023/01/04/"}},"content":"Today we offer the variants of Button, ButtonLink, Link and LinkButton. In the future we will also offer the ButtonToggle (Toogle button). All semantic links only support `_href` and all buttons only `_on` as a semantic \\"click\\". Visually, there are buttons that look exactly like links and links that look exactly like buttons.\\n\\nThe following table provides an overview of the differences:\\n\\n|  Merkmal  | Link | LinkButton |  Button  | ButtonLink | ToggleButton<sup>\\\\*</sup> |\\n| :-------: | :--: | :--------: | :------: | :--------: | :-----------------------: |\\n|  Design   | Link |   Button   |  Button  |    Link    |          Button           |\\n| Semantics | `a`  |    `a`     | `button` |  `button`  |          `input`          |\\n|  `_href`  |  \u2795  |     \u2795     |    \u2796    |     \u2796     |            \u2796             |\\n|   `_on`   |  \u2796  |     \u2796     |    \u2795    |     \u2795     |            \u2795             |\\n| `focus()` |  \u2795  |     \u2795     |    \u2795    |     \u2795     |            \u2795             |\\n|   Value   |  \u2796  |     \u2796     |    \u2796    |     \u2796     |         `boolean`         |\\n\\n<small>\\n\\t<sup>*</sup> The toggle button was implemented as a variant of the checkbox because it is a switch with a maximum of two states (either \\"on\\" or \\"off\\").\\n</small>\\n\\n## Motivation\\n\\nIn addition to a high level of standard conformity, KoliBri also strives for very good reusability (Developer Experience DX).\\nThis is addressed by the uniformity of the HTML attributes and the economical use of additional properties.\\n\\n> **Rationale:** Given a link component intended for navigation, if we consider the two behaviors **Navigate** and **Click without navigating**\\n> would offer, then we would have a contradiction in behavior. Also when used in development we would need the properties `_href` and `_on`\\n> make it optional and we could no longer warn against misuse (static code checking).\\n\\n## Challenges\\n\\nThis strict interpretation can cause problems when developing with other libraries and frameworks.\\nEspecially when they expect a click on a link.\\n\\n### React-Router\\n\\nThe React router maps navigation via clicks. When used with the link component, there are different implementation options.\\n\\n**Wrapping:**\\n\\n```tsx\\n<Link to=\\"/\\">\\n\\t<KolLink _href=\\"\\">Home</KolLink>\\n</Link>\\n<Link to=\\"/test\\">\\n\\t<KolLink _href=\\"\\">Test</KolLink>\\n</Link>\\n```\\n\\n**With a click:**\\n\\n```tsx\\n<KolButtonLink\\n\\t_label=\\"Home\\"\\n\\t_on={{\\n\\t\\tonClick: () => navigate(\\"/\\")\\n\\t}}\\n>\\n\\tHome\\n</KolButtonLink>\\n<KolButtonLink\\n\\t_label=\\"Test\\"\\n\\t_on={{\\n\\t\\tonClick: () => navigate(\\"/test\\")\\n\\t}}\\n>\\n\\tTest\\n</KolButtonLink>\\n```\\n\\n**React-Link:**\\n\\n```tsx\\n<KolLink\\n\\t_href=\\"\\"\\n\\t_label=\\"Home\\"\\n\\tonClick={() => navigate(\\"/\\")}\\n>\\n\\tHome\\n</KolLink>\\n<KolLink\\n\\t_href=\\"\\"\\n\\t_label=\\"Test\\"\\n\\tonClick={() => navigate(\\"/test\\")}\\n>\\n\\tTest\\n</KolLink>\\n```\\n\\n> **Notice:** `_href=\\"\\"` is actually not allowed.\\n\\nHThere is also a small code example here <kol-link _href=\\"https://codesandbox.io/s/kolibri-sample-react-link-sample-1jgz8v?file=/src/Navigation.tsx:0-112\\" _label=\\"\\" _target=\\"sandbox\\">Navigate with React router</kol-link>.\\n\\nThe provided examples show that the Link and ButtonLink components are suitable for direct use with React-Router. However, the link component is also used within other KoliBri components. **Where that wouldn\'t work!**\\n\\n### Server side rendering\\n\\nThe server-side rendering is very similar to the React router because it is technically very strongly driven by the Remix framework.\\nRemix is \u200b\u200ba framework for building hybrid client and server side web applications. This means that the implementation does not differ whether I want to build the application later as a client or server-side application.\\nFor server-side applications, the one-click navigating links must work because these applications run on the server and not in the browser.\\n\\nIn order to ensure that KoliBri can also be used for server-side web applications, it must also be possible to change pages by **clicking without navigating**.\\n\\n## Solution\\n\\nTo solve the challenges, all components that are passed link definitions are expanded. If ButtonLink definitions can also be transferred to these components, then they can also display clicks without navigating, but they still look like links.\\nThe following components must also be expanded:\\n\\n- Breadcrumb\\n- LinkGroup\\n- Nav\\n- SkipNav"},{"id":"/2023/01/04/","metadata":{"permalink":"/en/blog/2023/01/04/","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-01-04.mdx","title":"Translations","description":"As an open source project, it is important for KoliBri to have a community around","date":"2023-01-04T00:00:00.000Z","formattedDate":"January 4, 2023","tags":[{"label":"website","permalink":"/en/blog/tags/website"},{"label":"seo","permalink":"/en/blog/tags/seo"},{"label":"spec","permalink":"/en/blog/tags/spec"}],"readingTime":0.785,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Translations","authors":"deleonio","tags":["website","seo","spec"]},"prevItem":{"title":"Button and link components","permalink":"/en/blog/2023/01/09/"}},"content":"As an open source project, it is important for KoliBri to have a community around\\nto build up the topic of accessible basic components. So for this too\\noptimal accessibility is given, all technical\\nSpecifications must be available in at least **English**. As in the\\nScience allows for feedback and participation from all potential\\nareas.\\n\\n## Todo\\n\\n### English specification\\n\\nThe technical specification is automatically generated from the source code\\nand synchronized. All the information we put from the source code into the\\nTransfer specification, will in future only be in **English**\\nprovided.\\n\\nThis concerns, for example:\\n\\n- API specification on the website\\n- Details in IDE autocompletion\\n- Representations generated from the meta data of the source code\\n\\n### Multilinguale Dokumentation\\n\\nIn the future (in the medium term), the documentation will primarily include all content in\\n**German** and secondary in **English** provided.\\n\\nThis concerns, for example:\\n\\n- Instructions, concepts, examples and much more.\\n- Blog posts"}]}')}}]);